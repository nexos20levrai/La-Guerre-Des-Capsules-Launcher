name: Launcher Build
on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Create Release (draft)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: release ${{ env.version }}
          draft: true
          prerelease: ${{ contains(env.version, 'beta') || contains(env.version, 'alpha') }}

  build-launcher:
    needs: create-release
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install Updates
        run: npm i
        shell: bash

      - name: Install Dependencies
        run: npm ci
        shell: bash

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build
        shell: bash

      - name: Cosign - Install Cosign
        run: |
          curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-windows-amd64.exe -o cosign.exe
          chmod +x cosign.exe
        shell: bash

      - name: Sign executable with Cosign
        run: |
          # Échappez les guillemets et les secrets de manière appropriée
          $env:SIGSTORE_PRIVATE_KEY="${{ secrets.SIGSTORE_PRIVATE_KEY }}"
          $env:COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}"
          .\cosign.exe sign --key $env:SIGSTORE_PRIVATE_KEY --password $env:COSIGN_PASSWORD `
          dist\La\ Guerre\ Des\ Capsules\ Launcher\ Setup\ ${{ env.version }}.exe
        shell: powershell

  update-release:
    needs: build-launcher
    runs-on: ubuntu-latest
    steps:
      - name: Verify if Release exists
        run: |
          response=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.version }}")

          echo "API Response: $response"

          release_id=$(echo "$response" | jq .id)

          if [ "$release_id" != "null" ]; then
            echo "Release ID found: $release_id"
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"draft": false}' \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          else
            echo "Release ID not found, skipping update."
          fi
        env:
          version: ${{ env.version }}
